# -*- coding: utf-8 -*-
"""Copia de NOTES 04.01 - DATA EXPLORATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jNdfXKrZAzZvQa-YWXxRF0VHQzKgV6Iz

# 04.01 - DATA EXPLORATION
"""

!wget --no-cache -O init.py -q https://raw.githubusercontent.com/rramosp/ai4eng.v1/main/content/init.py
import init; init.init(force_download=False); init.get_weblink()

"""
## Based on [Kaggle House Pricing Prediction Competition](https://www.kaggle.com/c/house-prices-advanced-regression-techniques/)

- Inspect and learn from the competition [Notebooks](https://www.kaggle.com/c/house-prices-advanced-regression-techniques/notebooks)
- You must make available to this notebook the `train.csv` file from the competition [data](https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data) section. If running this notebook in Google Colab you must upload it in the notebook files section in Colab."""

# Commented out IPython magic to ensure Python compatibility.
## KEEPOUTPUT
import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
d = pd.read_csv("train.csv")
d.head()

"""data size"""

## KEEPOUTPUT
print (d.shape)

"""Missing values in columns"""

## KEEPOUTPUT
k = d.isna().sum()
k[k!=0]

"""## Inspect the target variable"""

## KEEPOUTPUT
sns.distplot(d['SalePrice']);

"""## Discover data types"""

## KEEPOUTPUT
d.columns

## KEEPOUTPUT
for c in d.columns:
    print ("%20s"%c, d[c].dtype)

"""## Inspect numeric columns"""

## KEEPOUTPUT
d._get_numeric_data().describe().T

## KEEPOUTPUT
cols = ['OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt', 'SalePrice']
#cols = np.unique(list(np.random.permutation(d._get_numeric_data().columns)[:5])+['SalePrice'])
sns.set()
sns.pairplot(d[cols])

"""### correlations"""

## KEEPOUTPUT
#correlation matrix
corrmat = d.corr()
f, ax = plt.subplots(figsize=(12, 9))
sns.heatmap(corrmat, vmax=.8, square=True);

"""## Inspect categorical variables"""

## KEEPOUTPUT
ccols = [i for i in d.columns if not i in d._get_numeric_data()]
print (ccols)

## KEEPOUTPUT
for c in ccols:
    print ("%10s"%c, np.unique(d[c].dropna()))

## KEEPOUTPUT
c="GarageType"
d[c].value_counts()

## KEEPOUTPUT
plt.figure(figsize=(20,8))
for i,c in enumerate(["ExterQual", "HouseStyle", "LandSlope", "Alley"]):
    plt.subplot(2,4,i+1)
    k=d[[c,"SalePrice"]].dropna()
    for v in d[c].dropna().unique():
        sns.distplot(k.SalePrice[k[c]==v], label=v);
        plt.title(c)
    plt.yticks([])
    plt.legend()
    plt.subplot(2,4,i+5)
    vc = k[c].value_counts()
    sns.barplot(vc.index, vc.values)
    plt.xticks(range(len(vc)), vc.index, rotation="vertical")

"""## Vision on mission values

Missing values in columns
"""

## KEEPOUTPUT
k = d.isna().sum()
k[k!=0]

## KEEPOUTPUT
ax = plt.figure(figsize=(30,15)).add_subplot(111)
ax.imshow(d.isna().values.T)
ax.set_aspect(12)
plt.yticks(range(d.shape[1]), d.columns);

